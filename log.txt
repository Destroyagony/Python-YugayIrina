Ссылка видео-чат:
https://meet.jit.si/LongCriesInformAccordingly


05.07.23 (lesson 1)

1. Pull Requests "Senatorov"
2. Fork от "Senatorov" на "YugayIrina"
3. Merg своих коммитов (изменила файл README.MD--> написала I love Python-->save commits)
4. Добавили  организацию: github---> your profile---> edit profile--->Добавили организацию 
"Senatorov"-->save
5. Скачали VS code--> установили программы
6. В vs code создали виртуальное окружение:
   * этот компьютер-->документы-->Github-->Python-YugayIrina 
   (и в поисковой строке вводу cmd и жму enter)-->появится консоль--> в консоле ввожу команды: 
python -m venv venv  (enter) # второе слово venv-это название виртуального окружения
venv\Scripts(после \ нажимаю tab на клавиатуре и появится 
слово Scripts)\activate(после \ нажимаю tab на клавиатуре и появится слово слово activate)(enter)

7. в VScode создали git ignore: 
   * этот компьютер-->документы-->Github-->Python-YugayIrina---> создать текстовый файл 
   с названием .gitignore--> зайти в него--> попадаю в VS code (Как-то потом в кошечке 
   всё схлопнулось-попало в gitignore :) )

8. Где я увижу домашнии задания?
  * кошечка (github)-->history-->нажимаю вкладку "Fetch origin"


07.07.23 (Lesson 2)

1. В VS code создали новый файл "Lesson2.ipynb" и записали в него определения понятий: 
Linter, Flake8, Black, Hot Key, а так же вспомнили Fork и Pull Requests
2. В VS code создали файл config.cfg и установили максимальную длину строки в 120 знаков через команду : 
        1. [flake8]
        2. max-line-length = 120
3. Вспомнили с помощью какой команды устанавливается вирутальное окружение.
4. Зашла в кошечку-->history-->нажимаю вкладку "Fetch origin"  и увидела новый файл "hw" 
с сайтами для прокачки алгоритмов: leetcode, codeforces, projecteuler
5. Зашли на сайт codeforces.com--->зарегистрировалась--->вошла.
6. Сайт codeforces.com--> раздел меню "Архив"--> нажимаю знак "молния" и отсортировала 
сложность задач по возрастанию.
7. Сайт codeforces.com--> решаем задачу #4A "Арбуз"-->вспомнила какой знак в Python делит 
число без остатка (%)
8. Ознакомились с понятиями "time complexity" и "space complexity"- The time and space complexities 
are not related to each other. They are used to describe how much space/time your algorithm takes 
based on the input (Не зависящие друг от друга понятия! Показывают какое время и пространство займет 
наш алгоритм)
9. VS code--> создали файл codeforces.py--> написали код для решения задачи! 
w = int(input())
if w % 2 == 0 and w > 2:            !!!!! Очень важно было добавить условие "and w > 2:", т.к. нам надо поделить арбуз на двоих,      
    print("YES")                          а цифра 2 не может поделиться поровну на двоих (согласно условияю), поэтому  
else:                                     устанавливаем ограничение > цифры 2 !!! То есть 4 уже может поровку поделиться на 
    print("NO")                           двоих!!!!
10. Заполнила журнал и закомитила изменения на github.
11. Уроки буду чередоваться: Дискретная математика \ Алгоритмы \ Python

10.07.23 (Lesson-GITHUB)

     ***** Если в телеграм пришла ссылка репы от коллеги о помощи:
- увидела в телеге ссылку репы коллеги
- захожу в ссылку
- проверяю коммент
- пишу свою подсказку (свое примечание)
- и тут же в гите делаю коммит и отправляю
- скопировать репу (сверху копирую вс. адресную строку репозитория)
- отписываюсь в телеге, что ответила (1строка: HELPERю  2-строка @эл.адресб  3-строка ссылка репы)
- в кошку вставляем ссылку и клонируем скопированную репу от коллеги
      
      ДРУГОЙ СПОСОБ, который не работает:
- пришла ссылка репы от коллеги в телеге
- захожу в ссылку
- проверяю коммент
- скопировать репу (сверху копирую вс. адресную строку репозитория)
- иду в кошку
- карент репозиторий
- адд
- клон репозиторий
- URL (вставляю ссылку)
-слон
- отправляем коммит 
- отписываемся в телеге

11.07.23 (Lesson 3)

1. В vs: Написали определение спортивного\олимпиадного программиста
2. В vs: Узнала, что переменные можно писать на любом языке мира, в т.ч. на русском. Но 
стандартом, по неглассной договоренности, считается латинский язык
3. В vs: Синтаксис по PEP8 (проверка благодаря Linter)
4. В vs: Функция HELP показывает описание любой функции. Как вызвать? Удерживаю CTRL и жму на нужную функцию (print, def и т.д.)
или можно написать help(print)/help(str) и т.д.
5.В vs: При вызове описания функции с помощь кнопки ctrl, появлется строка builtint.pyi-можно на нее нажать, что бы 
появилась вкладка с описанием всех функций Python
6. В vs: *args (*values)- это возможность принимать неограниченное количество аргументов
7.В vs: в папке config изменили длинну строки с 120 до 130
8. Заполнить journey+коммит
9. Домашка: доделать проект+ прочитать книгу "Типизированный Python" (Алексей Голобурдин)-ссылка в телеге

14.07.23 (Lesson 4)
1. Математические операторы, их определения и принцип работы (+,-,*, /, //, %, **)
2. в paint разбирали деление 3 на 4: определяли, где получается значения для %, а где 
для //! (файл из paint сохранила) 
3.Для понимания работы функции и др.операций, 
надо заходить на pythontutor.ru-->Python--> вставить свой код-->нажимать на 
стрелочки вперед-назад и буду видеть как работает программа!!
4. Дочитать книгу "Типизированный Python" (Алексей Голобурдин)
5. Журнал Заполнить
6. коммит+пуш

18.07.23 (Lesson 5)

1. Изучали разницу понятий между операторами 'is' и '=='! 
IS - проверяет объект на идентичность
== - проверяет эквивалент объектов
2. На практике проверяли работу is и ==
3. Находили id ячейки. Синтаксис: id(название переменной)
4. Переменные находились в одной и той же ячейке (id общий), только 
в том случае, если значения в переменной были в диапозоне от -5 до 256!
То есть id(num) !== id(num2)
5. Если значения в переменной увеличивались, например -6 или 257, то создавалась
новая ячейка, то есть id уже был разный у двух переменных! То есть id(num) !== id(num2)
5. Определяли тип данных через type. Синтаксис: type(название переменной). 
Например type(num) == int, type(list1) == str
6. Узнала как удалять переменную. Синтаксис: del+пробел+переменная. 
После операции del удаляется не только переменная, но все ее значения-
это происходит автоматически!!!!
7.Вспомнили функция helt. Синтаксис: печатаю help(тип данных) и 
далее жму CTRL+жму на help и выходит новая вкладка "buitins"
8. Заполнить journey+коммит+пуш

21.07.2023 (Lesson 6)

Подробнее ознакомились с возможностями GIT:
1. Во вкладке "Issues" можно создать предложения\темы для модификаций данного конкретного
проекта, для его улучшения или исправления ошибок. Issues могут создавать как владельцы проекта, так и 
пользователи сети интернет
2.Вкладка "CODE":
    * В разделе MIT LICENSE  мы можем прочитать правила использования данного репозитория: можем ли форкать, 
можем ли модифицировать и т.д.
    * Показатели разделов: stars, watching, forks -показывают нам картину на сколько данный проект популярен 
    и крут! Сколько его форкнули, просмотрели и поставли звезд!
    * Так же, можем посмотреть количество участников проекта (Contributors)
    * В разделе Languages мы видим на скольких языках написан данный проект и их использование в процентном 
    соотношении
3. Вкладка "Actions":
    * В Actions мы можем тестировать наш проект, развертывать на сервере
    * В Actions есть готовые шаблоны (workflows), которыми мы можем пользоваться: deployment, security, CI, pages и др.
    * Но так же, мы можем создать свои собственные workflows
    * Actions позволяют полностью реализовать CI/CD (Continius intergation/ Continius delivery)
      CI- это автоматизированное приложение, которое забирает код из репозитория, соединяет части кода воедино,
       тестирует код. 
      CD- развертывание проекта на сервере, модификация
4. Узнала, что практически любой сайт можно найти на GitGub
5. !!!!! СДЕЛАТЬ!!!! Домашнее задание:   
    * Сделать fork репозитория коллеги
    * Создать коммит + helper
    * Отправить PullRequests
6. Заполнить journey+commit+push

25.07.2023 (Lesson 7)
   Продолжили знакомтсво с GITHUB:
1. Раздел "Edit profile" (сразу под аватаркой):
       * Добавили ссылку на LeedCode (Зашла в ЛК leedcode  и скопировала ссылку)
       * Добавили ссылку на CodeForce (Зашла в ЛК CodeForce  и скопировала ссылку)
       * Добавили ссылку на Kaggle (Зашла в ЛК Kaggle  и скопировала ссылку)
       * !!!!! СДЕЛАТЬ!!!! в четвертой ссылке должно быть мое "сайт-резюме" (СОЗДАМ И ДОБАВЛЮ)
       * Справа от аватарки, есть файл README.MD -надо нажать на карандаш и подробно описать, желательно на англ.яз, 
       про мою страницу на github, про репозитории и файлы в нем!! Вообщем, это ознакомительная инфа про меня (Посмотреть на примере Татьяны)!
   
2. !!!!! СДЕЛАТЬ!!!! Надо получать сертификаты по пройденным курсам и все их прикреплять в github 
(Посмотреть как у Бориса сделано)
3. На аватарке дорлжна быть моя фотка!!!
4. В раздел "Stars" добавила 2 репозитория по обучению, для быстрого доступа!
5. Что бы найти нужный репозиторий или студента: нажимаю на SENATOROV-->ниже спускаюсь и в поисковой строке (find
 repository) вбиваю ключевые слова поиска!
6. На главной странице есть шкала посещений-зеленые квадратики "Contribution activity"! Если нажать на к-л квадрат, то я увижу число,
 месяц и что я сделала за этот день!
7. Что бы кошка видела, что я делаю в VS code- я должна создавать папки только в репозитории Python-YugayIrina!
Другие репозитории кошка не отследивает!
8. ВСТАВЛЯЮ ФОТО/картинку В JUPYTER (VS CODE):
    *  Создаю новую строку в jupyter (через +code)
    *  иду в папку, где сохранена фотка
    * кликаю на фото и удержива.
    * держа клик на фото, я нажимаю alt и теперь кнопкой tab  я нахожу нужное мне окошко, куда буду вставлять фото
    * Когда tab нашел нудное окно, то отпускаю alt, но продолжаю удерживать клик на фотке.
    * я попадаю в jupyter, теперь мечу в нужную строку и отпускаю клик! 
    * Всё! фотка добавлена! Тепеь созраняю ctrl+s 

9.  ДЗ:
    * каждый день изучать git
    * заполнить свой профиль
    * подписаться на студентов SENATOROV
    * прикреплять полученные сертификаты
    * Пушить репозитории
    * Заполнить  log.txt. Коммит. Пуш


28.07.2023 (Lesson 8)
1.В GITHUB выбрали тему оформления профля:
 Темы для оформления, вот по этой ссылке:
https://github.com/abhisheknaiidu/awesome-github-profile-readme#code-mode-
2. Сначала форкаю эту тему и потом уже редактирую у себя.
3. Что бы внести изменения, надо нажать на карандаш:
        * Можно изменить свое имя
        * Изменить свои скилы
        * добавить ссылки на своИ сайт-резюме или ссылки на мои соц.сети, вот как
        это делается:
- Пример оформления ссылок на мой сайт-резюме или страничку в соц.сетях (twitter, discard и т.д.):
- [marton.lederer.hu](https://marton.lederer.hu)
- [@martonlederer](https://twitter.com/martonlederer) on Twitter
- [@martonlederer](./) on Discord
4. Учились работать с Telegramm :)
      * Надо всегда отвечать на письма, адресованные мне
      * Надо участвовать в проектах обязательно
      * Если что-то не понятно,по любому вопросу, то сразу создаю письмо в разделе "Help me"
    

29.07.2023 (Lesson 9)
1. Изучали основное понятие алгоритмов и их структуры данных
2. Написание кода-это и есть алгоритм. Для решения задачи, можно написать код разными способами 
и все они будут результативными, но не оптимальными!
3. Что бы решение задачи было реализованно оптимально, существуют готовые алгоритмы, которыми мы должны пользоваться.
4. Для практики, написали код, который будет выводить четные числа до 100:
    list_numbers: list[int] = [] --> квадратные скобки-это структура данных, список (list)
                                 --> создаем переменную list_numbers:
        for num in range(101):   --> используем цикл,т.к. нам надо неоднократно применить условие! Т.к. нам надо вывод до 100, пожтому пишем 101!!!
            if num % 2 == 0:     --> использовали % -деление по модулю на 2, но так, что  бы в результате деления получился 0
                list_numbers.append().__call__(num)  --> # вызываем переменную
    dir(list_numbers)  # dir - это атрибуты объекта
    list_numbers
 
5. Существует 2 типа функции (метода):
        * Результирующие      --> в нашем случае это: ._call_(num)
        * Void(None)          --> функция что-то делает и не возвращает! В нашем случае это: .append()

6. На страничке https://www.geeksforgeeks.org/python-range-function/ нашли определение:
        * Python range() function- The Python range() function returns a sequence of numbers, in a given range.
        * Syntax: range(start, stop,  step), то есть start и stop -это от 1 до 100, step-это 101
7. Надо писать только СТАТИЧЕСКИЙ ТИП ДАННЫХ, А НЕ ДИНАМИЧЕСКИЙ! 
В чем разница: 
Статическая типизация означает проверку типов перед запуском программы. 
Динамическая типизация— проверку типов, когда программа запущена.
8. Software Prototyping (Прототипирование)
После рассмотрения прототипа, при окончательной реализации решения обычно пишут более аккуратный, 
документированный код! На этапе прототипирования выявляются важные архитектурные ошибки, 
вносятся поправки в интерфейсы модулей системы и перераспределяется функциональность между модулями системы.

04.08.2023 (Lesson 10)

1. С помощью встроенной функции type() можно определить тип данных! Это необходимо, для
дальнейшего использования соответствующих функций и методов
2. Вспомнили разницу между is и ==:
    * оператор is сравнивает id двух объектов
    * == присваивает значение
3. Вспомнили функцию id(), которая возвращает уникальный идентификатор для указанного объекта.
У объектов будет одинаковый id() , если диапозон их значений от -5 до 256! 
4. Изучали типы данных на предмет их изменяемости (immutable):True == 1, False == 0
    * bool (логическое значение)        
    * int (числа)
    * str (строка)
    * float (плавающая)
    * list (список)....................mutable
    * tuple (кортеж)
    * set (множество).................mutable
    * frozenset (неизменяемая версия set)
    * dict (словарь)...................mutable

**********   ВСЕ ТИПЫ ДАННЫХ НЕИЗМЕНЯЕМЫЕ (IMMUTABLE), КРОМЕ: list, set., dict   ********
5. Начали изучать тип данных set(множество):
   * определение
   * синтаксис 
   * свойства
   * и др.
Подробное описание множеств по ссылке: https://habr.com/ru/articles/516858/ 

08.08.2023 (Lesson 11)
1. Math in english
    * All entries are in my copybook!
    * Added a lot of new words to my math-vocabulary.
    * All words were wrighten with transcriptions 
    * For pronunciation --> https://wooordhunt.ru/
    * For translate from russian to english (and vise versa) --> https://translate.yandex.ru/
    * For new words --->https://www.multitran.com/
    
11.08.2023 (Lesson 12)
1. Алгоритмы и структуры данных:
    * Понятие Биг-О натоции
    * Два основных вида Биг-О натоции (Time/SpaceComplexity)
    * Понятие SpaceComplexity
    * Понятие TimeComplexity
2. Для практики и знаний ---> https://www.freecodecamp.org
3. Лекции записываю в тетради

15.08.2023 (Lesson 13)
1. Написали опредение модулей, пакетов
2. Anaconda:
    * написали опредение Anaconda
    * сделали установку ( https://www.anaconda.com/download )
3. Библиотека Numpy:
    * написали определение
    * https://numpy.org/doc/stable/ ---> раздел меню dokumentation---> getting started
    * информация: https://blog.skillfactory.ru/glossary/numpy/
4. Библиотека Pandas:
    * Понятие Pandas и его возможности (https://habr.com/ru/articles/196980/)
    * информация: https://blog.skillfactory.ru/glossary/pandas/
    * в Pandas существует 2 основные структуры хранения данных: Series и DataFrame. (https://habr.com/ru/articles/196980/)
5. Структура хранения данных в Pandad-DataFrame:
    * определение DataFrame (https://rpubs.com/pro_shad95/635126)    
    * что из себя представляет DataFrame (https://pandas.pydata.org/docs/getting_started/intro_tutorials/01_table_oriented.html#min-tut-01-tableoriented)
6. csv (от англ. Comma-Separated Values — значения, разделённые запятыми):
    * как выглядит csv-файл (https://manifold.net/doc/mfd9/example__import_csv_and_create_a_drawing.htm)
    * csv-файл используют для создания и сохранения таблиц
7. Мода и медиана:
    * как рассчитать медиану и моду (https://ru.wikihow.com/найти-среднее-значение,-моду-и-медиану)
8. Функция mode() в Python (https://pythonpip.ru/osnovy/funktsiya-mode-v-python-modulya-statistics):
    * написали определние данной функции
    * как работает функция mode

18.08.2023 (Lesson 14)
1. Лекцию записываю в тетради
2. Понятие знака phi (фи). Знак=перечеркнутый круг
3. Понятие "Диаграммы Венна" (Venn Diagram)
4. Теория множеств:
    * Определение sets
    * Знак "вхождение"
    * Знак "пересечение"
    * Знак "объединение"
    * Нарисовали диаграмму Венна

22.08.2023 (Lesson 15)
1. Продолжаем изучать numpy и pandas https://numpy.org/numpy-tutorials/content/tutorial-ma.html
2. В VS подключили Anaconda (Lesson15-->правый верхний угод-->выбираю "Base Python 3.11.4/`/anaconda3/python.exe.....")
    Numpy:
3. Numpy написан на языке "C", поэтому очень быстро работает
4.Зашли на сайт https://numpy.org --> раздел "документация"
5. В VS практика с numpy: импортировали numpy: import numpy as np--> вывели список
6. Записали, что знаки ! и  % используются только для jupyter-запуск команды
    Pandas:
7. На сайте https://pandas.pydata.org/ представлены все возмодности pandas
8. Pandas позволяет визуализировать код с помощью таблиц: строки (row) и столбцы (column)
9. Разводиность диаграмм -это "Ящик с усами". Данная диаграмм позволяет нам увидеть данные схематично: 
верхнюю и нижнюю границу, верхний и нижний квартиль, а так же   и медиану
10. Для Pandas необходимо понимать линейнуб алгебру, т.к. предстоит работать с массивами









!!!!!!!!!!!!!!
MY HINTS:
1). Что бы проверить в ide какие пакеты установлены, надо в консоле ввести: pip freeze
2). https://t.me/c/1733865840/429  (синхронизация telegram c мобилы на комп): 
скачать на комп + с мобилы сосканить QR-код
3). Как отправить коммит из кошечки: захожу в кошечку-->fetch origin (т.е. обновляю и появляется 
в changes цифра=изменения)--->changes-->внизу слева, в строке update ввожу название коммита 
и нажимаю commit to main-->появится синяя кнопка push origin-->нажимаю push origin и 
иду на github проверять!
4). Горячие команды:
CTRL+S --> сохранение
CTRL+Z --> вернуть предыдущие данные
SHIFT+ALT+F --> в VS выравнивает синтаксис, согласно PEP8
ALT+TAB --> переключение окон
CTRL+A+CTRL+V --> в VS выделяет код и вставляет скопированный
5). Что бы в VS создать новый файл урока "Lesson4": file-->new file-->щелкаю мышью на jupyter--> CTRL+S  и появится окно для создания и сохранения текстового файла-вот сдесь и создаю новый файл Lesson
6). Что бы поделиться экраном, в VS слева на понеле меню нажимаю знак "стрелочка над круглишком",далее ждем загрузку команды! После, нажимаю CTRL+S и вставляю в чате нашей встрече- ссылку!
 7). После зачета командного проекта, надо писать запрос на код-ревью @san1rope с ссылкой на проект с репозитория ОРГАНИЗАЦИИ
8). В vs code создали ВТИРТУАЛЬНОЕ ОКРУЖЕНИЕ:
   * этот компьютер-->документы-->Github-->Python-YugayIrina 
   (и в поисковой строке вводу cmd и жму enter)-->появится консоль--> в консоле ввожу команды: 
python -m venv venv  (enter) # второе слово venv-это название виртуального окружения
venv\Scripts(после \ нажимаю tab на клавиатуре и появится 
слово Scripts)\activate(после \ нажимаю tab на клавиатуре и появится слово слово activate)(enter)
9). Копируем проект с GITHUB НА VS CODE:
    *Захожу на локальном компьютере в мою папку GItHUB-->открываю консоль cmd: git clone <и вставляю ссылку на репозиторий проекта из github,который хочу клонировать> и жму ентер! ВСЕ ГОТОВО! Далее создаю виртуально окрудение и начинаю работать!!!  
10).Как в VS code добавить pdf-файл:
        *в vs создала папку Day2-->перетащила в него свой pdf файл и 
        пока он показывает абру-кадабру!
        *Скачиваю в нете vscode-pdf-->спросит "установить в vs code"--> соглашаюсь и жду
        * как только закончилась загрузка, сразу мой pdf стал красивый





 !!!!!!!!!!!!!!!!
 GIT HUB:
 2). Когда Руслан отписывается, что принял pull requests-я должна в гите нажать: 
 захожу в нужный репозиторий-->Sync fork-->Update
